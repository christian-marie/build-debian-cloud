#!/bin/bash

# Stop execution if any command fails
set -e

# Rember various paths
scriptdir="$(dirname "$(readlink -f "$0")")"
if [ ! -d "$scriptdir/tasks" ]; then
	scriptdir='/usr/share/build-debian-cloud'
	if [ ! -d "$scriptdir/tasks" ]; then
		die "Unable to locate tasks folder."
	fi
fi
originaldir=$(pwd)

# Directory where the tarball created while bootstrapping should be put
tarballdir=$scriptdir

source $scriptdir/utils

# Tasks, packages, plugins, boot scripts
tasks=()
packages=()
exclude_packages=()
host_packages=()
plugins=()
init_scripts=()
cleanups=()

# General options about the instance
arch='amd64'
locale='en_AU'
charmap='UTF-8'
timezone='Australia/Sydney'

distribution='debian'
codename='wheezy'

# Filesystem and image info
filesystem='ext4'
mountoptions=
device_path=
imagedir=


platform_help="build-debian-cloud
This script creates a Debian image for multiple cloud platforms.

Valid subcommands are:
    avf    Build an Anchor Virtual Fleet Image
    ec2    Build an Amazon Machine Image
    gce    Build a Google Compute Engine Image
"

platform=$1

case $platform in
	avf|ec2|gce) shift ;;
	*)       printf -- "$platform_help"; exit 0  ;;
esac

source $platform

# Check if the chosen fs is on we can handle.
case $filesystem in
	xfs)  ;;
	ext2) ;;
	ext3) ;;
	ext4) ;;
	*)    die "The filesystem $filesystem was not recognized." \
	          "Valid filesystems are ext[2-4] and xfs"      ;;
esac

# Put all tasks in the tasks folder into an array. Tolerate the absence
# of some possible directories.
directories=`ls -d $scriptdir/tasks $scriptdir/tasks/$codename \
	$scriptdir/tasks/$platform $scriptdir/tasks/$platform/$codename \
	2>/dev/null || true`
tasklist=`find $directories \
	-maxdepth 1 -type f -name '[0-9][0-9]-*' \
	-printf '%p\t%f\n' | sort -k 2 | awk '{print $1}'`
tasks=()
for task in $tasklist; do
	if $(contains_basename `basename $task` tasks[@]); then
		die "The task $task has a naming conflict with an existing task." "Please rename the file."
	fi
	tasks+=($task)
done

# Invoke plugins so that they may reorder and add tasks
for plugin in "${plugins[@]}"; do
	[ -e $plugin ] || die "The plugin file $plugin does not exist."
	# Get the directory of the current plugin.
	# This way the plugins don't have to figure it out for themselves.
	plugindir=`dirname $plugin`
	source $plugin
done
unset plugindir

# Make sure we run cleanups regardless of what happened
trap "source $scriptdir/tasks/99-emergency-cleanup" ERR EXIT

# Source all tasks in the right order
for task in ${tasks[*]}; do
	[ -e $task ] || die "The task $task does not exist."
	log "Run task: `basename $task`"
	taskdir=`dirname $task`
	source $task
done
unset taskdir

# Cleanups ran OK, won't have to run them again
trap - ERR EXIT
